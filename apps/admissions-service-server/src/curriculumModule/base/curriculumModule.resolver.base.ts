/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CurriculumModule } from "./CurriculumModule";
import { CurriculumModuleCountArgs } from "./CurriculumModuleCountArgs";
import { CurriculumModuleFindManyArgs } from "./CurriculumModuleFindManyArgs";
import { CurriculumModuleFindUniqueArgs } from "./CurriculumModuleFindUniqueArgs";
import { CreateCurriculumModuleArgs } from "./CreateCurriculumModuleArgs";
import { UpdateCurriculumModuleArgs } from "./UpdateCurriculumModuleArgs";
import { DeleteCurriculumModuleArgs } from "./DeleteCurriculumModuleArgs";
import { DegreeSpecialty } from "../../degreeSpecialty/base/DegreeSpecialty";
import { CurriculumModuleService } from "../curriculumModule.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CurriculumModule)
export class CurriculumModuleResolverBase {
  constructor(
    protected readonly service: CurriculumModuleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CurriculumModule",
    action: "read",
    possession: "any",
  })
  async _curriculumModulesMeta(
    @graphql.Args() args: CurriculumModuleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CurriculumModule])
  @nestAccessControl.UseRoles({
    resource: "CurriculumModule",
    action: "read",
    possession: "any",
  })
  async curriculumModules(
    @graphql.Args() args: CurriculumModuleFindManyArgs
  ): Promise<CurriculumModule[]> {
    return this.service.curriculumModules(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CurriculumModule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CurriculumModule",
    action: "read",
    possession: "own",
  })
  async curriculumModule(
    @graphql.Args() args: CurriculumModuleFindUniqueArgs
  ): Promise<CurriculumModule | null> {
    const result = await this.service.curriculumModule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CurriculumModule)
  @nestAccessControl.UseRoles({
    resource: "CurriculumModule",
    action: "create",
    possession: "any",
  })
  async createCurriculumModule(
    @graphql.Args() args: CreateCurriculumModuleArgs
  ): Promise<CurriculumModule> {
    return await this.service.createCurriculumModule({
      ...args,
      data: {
        ...args.data,

        degreeSpecialty: args.data.degreeSpecialty
          ? {
              connect: args.data.degreeSpecialty,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CurriculumModule)
  @nestAccessControl.UseRoles({
    resource: "CurriculumModule",
    action: "update",
    possession: "any",
  })
  async updateCurriculumModule(
    @graphql.Args() args: UpdateCurriculumModuleArgs
  ): Promise<CurriculumModule | null> {
    try {
      return await this.service.updateCurriculumModule({
        ...args,
        data: {
          ...args.data,

          degreeSpecialty: args.data.degreeSpecialty
            ? {
                connect: args.data.degreeSpecialty,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CurriculumModule)
  @nestAccessControl.UseRoles({
    resource: "CurriculumModule",
    action: "delete",
    possession: "any",
  })
  async deleteCurriculumModule(
    @graphql.Args() args: DeleteCurriculumModuleArgs
  ): Promise<CurriculumModule | null> {
    try {
      return await this.service.deleteCurriculumModule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => DegreeSpecialty, {
    nullable: true,
    name: "degreeSpecialty",
  })
  @nestAccessControl.UseRoles({
    resource: "DegreeSpecialty",
    action: "read",
    possession: "any",
  })
  async getDegreeSpecialty(
    @graphql.Parent() parent: CurriculumModule
  ): Promise<DegreeSpecialty | null> {
    const result = await this.service.getDegreeSpecialty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
