/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DegreeSpecialty as PrismaDegreeSpecialty,
  CurriculumModule as PrismaCurriculumModule,
} from "@prisma/client";

export class DegreeSpecialtyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DegreeSpecialtyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.degreeSpecialty.count(args);
  }

  async degreeSpecialties<T extends Prisma.DegreeSpecialtyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreeSpecialtyFindManyArgs>
  ): Promise<PrismaDegreeSpecialty[]> {
    return this.prisma.degreeSpecialty.findMany<Prisma.DegreeSpecialtyFindManyArgs>(
      args
    );
  }
  async degreeSpecialty<T extends Prisma.DegreeSpecialtyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreeSpecialtyFindUniqueArgs>
  ): Promise<PrismaDegreeSpecialty | null> {
    return this.prisma.degreeSpecialty.findUnique(args);
  }
  async createDegreeSpecialty<T extends Prisma.DegreeSpecialtyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreeSpecialtyCreateArgs>
  ): Promise<PrismaDegreeSpecialty> {
    return this.prisma.degreeSpecialty.create<T>(args);
  }
  async updateDegreeSpecialty<T extends Prisma.DegreeSpecialtyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreeSpecialtyUpdateArgs>
  ): Promise<PrismaDegreeSpecialty> {
    return this.prisma.degreeSpecialty.update<T>(args);
  }
  async deleteDegreeSpecialty<T extends Prisma.DegreeSpecialtyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreeSpecialtyDeleteArgs>
  ): Promise<PrismaDegreeSpecialty> {
    return this.prisma.degreeSpecialty.delete(args);
  }

  async findCurriculumModules(
    parentId: string,
    args: Prisma.CurriculumModuleFindManyArgs
  ): Promise<PrismaCurriculumModule[]> {
    return this.prisma.degreeSpecialty
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .curriculumModules(args);
  }
}
