/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DegreeSpecialtyService } from "../degreeSpecialty.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DegreeSpecialtyCreateInput } from "./DegreeSpecialtyCreateInput";
import { DegreeSpecialty } from "./DegreeSpecialty";
import { DegreeSpecialtyFindManyArgs } from "./DegreeSpecialtyFindManyArgs";
import { DegreeSpecialtyWhereUniqueInput } from "./DegreeSpecialtyWhereUniqueInput";
import { DegreeSpecialtyUpdateInput } from "./DegreeSpecialtyUpdateInput";
import { CurriculumModuleFindManyArgs } from "../../curriculumModule/base/CurriculumModuleFindManyArgs";
import { CurriculumModule } from "../../curriculumModule/base/CurriculumModule";
import { CurriculumModuleWhereUniqueInput } from "../../curriculumModule/base/CurriculumModuleWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DegreeSpecialtyControllerBase {
  constructor(
    protected readonly service: DegreeSpecialtyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DegreeSpecialty })
  @nestAccessControl.UseRoles({
    resource: "DegreeSpecialty",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDegreeSpecialty(
    @common.Body() data: DegreeSpecialtyCreateInput
  ): Promise<DegreeSpecialty> {
    return await this.service.createDegreeSpecialty({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        languageOfInstruction: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [DegreeSpecialty] })
  @ApiNestedQuery(DegreeSpecialtyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DegreeSpecialty",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async degreeSpecialties(
    @common.Req() request: Request
  ): Promise<DegreeSpecialty[]> {
    const args = plainToClass(DegreeSpecialtyFindManyArgs, request.query);
    return this.service.degreeSpecialties({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        languageOfInstruction: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DegreeSpecialty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DegreeSpecialty",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async degreeSpecialty(
    @common.Param() params: DegreeSpecialtyWhereUniqueInput
  ): Promise<DegreeSpecialty | null> {
    const result = await this.service.degreeSpecialty({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        languageOfInstruction: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DegreeSpecialty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DegreeSpecialty",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDegreeSpecialty(
    @common.Param() params: DegreeSpecialtyWhereUniqueInput,
    @common.Body() data: DegreeSpecialtyUpdateInput
  ): Promise<DegreeSpecialty | null> {
    try {
      return await this.service.updateDegreeSpecialty({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          languageOfInstruction: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DegreeSpecialty })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "DegreeSpecialty",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDegreeSpecialty(
    @common.Param() params: DegreeSpecialtyWhereUniqueInput
  ): Promise<DegreeSpecialty | null> {
    try {
      return await this.service.deleteDegreeSpecialty({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          languageOfInstruction: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/curriculumModules")
  @ApiNestedQuery(CurriculumModuleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CurriculumModule",
    action: "read",
    possession: "any",
  })
  async findCurriculumModules(
    @common.Req() request: Request,
    @common.Param() params: DegreeSpecialtyWhereUniqueInput
  ): Promise<CurriculumModule[]> {
    const query = plainToClass(CurriculumModuleFindManyArgs, request.query);
    const results = await this.service.findCurriculumModules(params.id, {
      ...query,
      select: {
        createdAt: true,

        degreeSpecialty: {
          select: {
            id: true,
          },
        },

        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/curriculumModules")
  @nestAccessControl.UseRoles({
    resource: "DegreeSpecialty",
    action: "update",
    possession: "any",
  })
  async connectCurriculumModules(
    @common.Param() params: DegreeSpecialtyWhereUniqueInput,
    @common.Body() body: CurriculumModuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      curriculumModules: {
        connect: body,
      },
    };
    await this.service.updateDegreeSpecialty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/curriculumModules")
  @nestAccessControl.UseRoles({
    resource: "DegreeSpecialty",
    action: "update",
    possession: "any",
  })
  async updateCurriculumModules(
    @common.Param() params: DegreeSpecialtyWhereUniqueInput,
    @common.Body() body: CurriculumModuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      curriculumModules: {
        set: body,
      },
    };
    await this.service.updateDegreeSpecialty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/curriculumModules")
  @nestAccessControl.UseRoles({
    resource: "DegreeSpecialty",
    action: "update",
    possession: "any",
  })
  async disconnectCurriculumModules(
    @common.Param() params: DegreeSpecialtyWhereUniqueInput,
    @common.Body() body: CurriculumModuleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      curriculumModules: {
        disconnect: body,
      },
    };
    await this.service.updateDegreeSpecialty({
      where: params,
      data,
      select: { id: true },
    });
  }
}
